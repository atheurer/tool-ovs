#!/usr/bin/env python3
# -*- mode: python; indent-tabs-mode: t; python-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python
import sys
import os
import multiprocessing
import lzma
from pathlib import Path
TOOLBOX_HOME = os.environ.get('TOOLBOX_HOME')
if TOOLBOX_HOME is None:
    print("This script requires libraries that are provided by the toolbox project.")
    print("Toolbox can be acquired from https://github.com/perftool-incubator/toolbox and")
    print("then use 'export TOOLBOX_HOME=/path/to/toolbox' so that it can be located.")
    exit(1)
else:
    p = Path(TOOLBOX_HOME) / 'python'
    if not p.exists() or not p.is_dir():
        print("ERROR: <TOOLBOX_HOME>/python ('%s') does not exist!" % (p))
        exit(2)
    sys.path.append(str(p))
from toolbox.metrics import log_sample
from toolbox.metrics import finish_samples


def main():
    print("ovs-post-process")
    file_name = 'conntrack-stats-show.txt.xz'
    with lzma.open(file_name, 'rt') as file:
        desc = {'source': 'ovs', 'type': 'connections', 'class': 'protocols'}
        proto_tcp = {'proto': 'tcp'}
        proto_udp = {'proto': 'udp'}
        proto_icmp = {'proto': 'icmp'}
        proto_other = {'proto': 'other'}
        tcp_sample = {'end': 0, 'value': 0}
        udp_sample = {'end': 0, 'value': 0}
        icmp_sample = {'end': 0, 'value': 0}
        other_sample = {'end': 0, 'value': 0}
        file_id = 'ovs'
        for line in file:
            if 'DATE' in line:
                # The date stamp indicates a new sample to log
                # DATE:1620741229.909499801
                time_stamp = float(line.split(':')[1])
                tcp_sample = {'end': time_stamp}
                udp_sample = {'end': time_stamp}
                icmp_sample = {'end': time_stamp}
                other_sample = {'end': time_stamp}
            elif 'TCP' in line:
                # TCP: 2587
                tcp_sample['value'] = int(line.split(':')[1])
                log_sample(file_id, desc, proto_tcp, tcp_sample)
            elif 'UDP' in line:
                # UDP: 74
                udp_sample['value'] = int(line.split(':')[1])
                log_sample(file_id, desc, proto_udp, udp_sample)
            elif 'ICMP' in line:
                # ICMP: 3
                icmp_sample['value'] = int(line.split(':')[1])
                log_sample(file_id, desc, proto_icmp, icmp_sample)
            elif 'Other' in line:
                # Other: 2
                other_sample['value'] = int(line.split(':')[1])
                log_sample(file_id, desc, proto_other, other_sample)
            else:
                continue

        finish_samples()


if __name__ == '__main__':
    exit(main())
